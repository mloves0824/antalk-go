// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// SeqServiceClient is the client API for SeqService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SeqServiceClient interface {
	GetSeq(ctx context.Context, in *GetSeqReq, opts ...grpc.CallOption) (*GetSeqResp, error)
}

type seqServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSeqServiceClient(cc grpc.ClientConnInterface) SeqServiceClient {
	return &seqServiceClient{cc}
}

func (c *seqServiceClient) GetSeq(ctx context.Context, in *GetSeqReq, opts ...grpc.CallOption) (*GetSeqResp, error) {
	out := new(GetSeqResp)
	err := c.cc.Invoke(ctx, "/seq.SeqService/GetSeq", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SeqServiceServer is the server API for SeqService service.
// All implementations must embed UnimplementedSeqServiceServer
// for forward compatibility
type SeqServiceServer interface {
	GetSeq(context.Context, *GetSeqReq) (*GetSeqResp, error)
	mustEmbedUnimplementedSeqServiceServer()
}

// UnimplementedSeqServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSeqServiceServer struct {
}

func (*UnimplementedSeqServiceServer) GetSeq(context.Context, *GetSeqReq) (*GetSeqResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSeq not implemented")
}
func (*UnimplementedSeqServiceServer) mustEmbedUnimplementedSeqServiceServer() {}

func RegisterSeqServiceServer(s *grpc.Server, srv SeqServiceServer) {
	s.RegisterService(&_SeqService_serviceDesc, srv)
}

func _SeqService_GetSeq_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSeqReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeqServiceServer).GetSeq(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/seq.SeqService/GetSeq",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeqServiceServer).GetSeq(ctx, req.(*GetSeqReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _SeqService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "seq.SeqService",
	HandlerType: (*SeqServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSeq",
			Handler:    _SeqService_GetSeq_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "seq.proto",
}
