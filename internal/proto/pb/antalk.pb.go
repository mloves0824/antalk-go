// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: antalk.proto

package proto

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type CmdType int32

const (
	CmdType_CMD_RESERVE  CmdType = 0
	CmdType_CMD_LOGIN    CmdType = 1
	CmdType_CMD_REGISTER CmdType = 2
)

var CmdType_name = map[int32]string{
	0: "CMD_RESERVE",
	1: "CMD_LOGIN",
	2: "CMD_REGISTER",
}

var CmdType_value = map[string]int32{
	"CMD_RESERVE":  0,
	"CMD_LOGIN":    1,
	"CMD_REGISTER": 2,
}

func (x CmdType) String() string {
	return proto.EnumName(CmdType_name, int32(x))
}

func (CmdType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4410512c4225a6e7, []int{0}
}

type DataType int32

const (
	DataType_DT_PB   DataType = 0
	DataType_DT_JSON DataType = 1
)

var DataType_name = map[int32]string{
	0: "DT_PB",
	1: "DT_JSON",
}

var DataType_value = map[string]int32{
	"DT_PB":   0,
	"DT_JSON": 1,
}

func (x DataType) String() string {
	return proto.EnumName(DataType_name, int32(x))
}

func (DataType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4410512c4225a6e7, []int{1}
}

type CmdInput struct {
	CmdType  CmdType  `protobuf:"varint,1,opt,name=cmd_type,json=cmdType,proto3,enum=proto.CmdType" json:"cmd_type,omitempty"`
	ReqId    int64    `protobuf:"varint,2,opt,name=req_id,json=reqId,proto3" json:"req_id,omitempty"`
	DataType DataType `protobuf:"varint,3,opt,name=data_type,json=dataType,proto3,enum=proto.DataType" json:"data_type,omitempty"`
	Data     []byte   `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *CmdInput) Reset()         { *m = CmdInput{} }
func (m *CmdInput) String() string { return proto.CompactTextString(m) }
func (*CmdInput) ProtoMessage()    {}
func (*CmdInput) Descriptor() ([]byte, []int) {
	return fileDescriptor_4410512c4225a6e7, []int{0}
}
func (m *CmdInput) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CmdInput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CmdInput.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CmdInput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CmdInput.Merge(m, src)
}
func (m *CmdInput) XXX_Size() int {
	return m.Size()
}
func (m *CmdInput) XXX_DiscardUnknown() {
	xxx_messageInfo_CmdInput.DiscardUnknown(m)
}

var xxx_messageInfo_CmdInput proto.InternalMessageInfo

func (m *CmdInput) GetCmdType() CmdType {
	if m != nil {
		return m.CmdType
	}
	return CmdType_CMD_RESERVE
}

func (m *CmdInput) GetReqId() int64 {
	if m != nil {
		return m.ReqId
	}
	return 0
}

func (m *CmdInput) GetDataType() DataType {
	if m != nil {
		return m.DataType
	}
	return DataType_DT_PB
}

func (m *CmdInput) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type CmdOutput struct {
	CmdType      CmdType  `protobuf:"varint,1,opt,name=cmd_type,json=cmdType,proto3,enum=proto.CmdType" json:"cmd_type,omitempty"`
	ReqId        int64    `protobuf:"varint,2,opt,name=req_id,json=reqId,proto3" json:"req_id,omitempty"`
	Status       bool     `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`
	ErrorCode    int32    `protobuf:"varint,4,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
	ErrorMessage string   `protobuf:"bytes,5,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	DataType     DataType `protobuf:"varint,6,opt,name=data_type,json=dataType,proto3,enum=proto.DataType" json:"data_type,omitempty"`
	Data         []byte   `protobuf:"bytes,7,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *CmdOutput) Reset()         { *m = CmdOutput{} }
func (m *CmdOutput) String() string { return proto.CompactTextString(m) }
func (*CmdOutput) ProtoMessage()    {}
func (*CmdOutput) Descriptor() ([]byte, []int) {
	return fileDescriptor_4410512c4225a6e7, []int{1}
}
func (m *CmdOutput) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CmdOutput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CmdOutput.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CmdOutput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CmdOutput.Merge(m, src)
}
func (m *CmdOutput) XXX_Size() int {
	return m.Size()
}
func (m *CmdOutput) XXX_DiscardUnknown() {
	xxx_messageInfo_CmdOutput.DiscardUnknown(m)
}

var xxx_messageInfo_CmdOutput proto.InternalMessageInfo

func (m *CmdOutput) GetCmdType() CmdType {
	if m != nil {
		return m.CmdType
	}
	return CmdType_CMD_RESERVE
}

func (m *CmdOutput) GetReqId() int64 {
	if m != nil {
		return m.ReqId
	}
	return 0
}

func (m *CmdOutput) GetStatus() bool {
	if m != nil {
		return m.Status
	}
	return false
}

func (m *CmdOutput) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *CmdOutput) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

func (m *CmdOutput) GetDataType() DataType {
	if m != nil {
		return m.DataType
	}
	return DataType_DT_PB
}

func (m *CmdOutput) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterEnum("proto.CmdType", CmdType_name, CmdType_value)
	proto.RegisterEnum("proto.DataType", DataType_name, DataType_value)
	proto.RegisterType((*CmdInput)(nil), "proto.CmdInput")
	proto.RegisterType((*CmdOutput)(nil), "proto.CmdOutput")
}

func init() { proto.RegisterFile("antalk.proto", fileDescriptor_4410512c4225a6e7) }

var fileDescriptor_4410512c4225a6e7 = []byte{
	// 345 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x8f, 0xbf, 0x6f, 0xe2, 0x30,
	0x1c, 0xc5, 0x63, 0x20, 0xbf, 0xbe, 0x04, 0x88, 0x2c, 0xdd, 0x29, 0xcb, 0x45, 0x11, 0xb7, 0xe4,
	0xd0, 0x89, 0xe1, 0x6e, 0xec, 0x46, 0x12, 0xa1, 0x54, 0x05, 0x2a, 0x13, 0x75, 0x8d, 0x5c, 0x6c,
	0x55, 0x55, 0x1b, 0x12, 0x12, 0x33, 0xf0, 0x4f, 0x54, 0xfd, 0xb3, 0x3a, 0x32, 0x76, 0xac, 0x60,
	0xec, 0x3f, 0x51, 0xe1, 0xa4, 0xaa, 0xba, 0x75, 0xe8, 0xe4, 0xe7, 0xf7, 0xac, 0xe7, 0xf7, 0x01,
	0x8b, 0xae, 0x05, 0xbd, 0xbf, 0x1b, 0x17, 0x65, 0x2e, 0x72, 0xac, 0xca, 0x63, 0xf8, 0x80, 0xc0,
	0x08, 0x32, 0x16, 0xaf, 0x8b, 0xad, 0xc0, 0x7f, 0xc0, 0x58, 0x65, 0x2c, 0x15, 0xbb, 0x82, 0x3b,
	0xc8, 0x43, 0x7e, 0xff, 0x5f, 0xbf, 0x7e, 0x3d, 0x0e, 0x32, 0x96, 0xec, 0x0a, 0x4e, 0xf4, 0x55,
	0x2d, 0xf0, 0x0f, 0xd0, 0x4a, 0xbe, 0x49, 0x6f, 0x99, 0xd3, 0xf2, 0x90, 0xdf, 0x26, 0x6a, 0xc9,
	0x37, 0x31, 0xc3, 0x7f, 0xc1, 0x64, 0x54, 0xd0, 0xba, 0xa2, 0x2d, 0x2b, 0x06, 0x4d, 0x45, 0x48,
	0x05, 0x95, 0x1d, 0x06, 0x6b, 0x14, 0xc6, 0xd0, 0x39, 0x69, 0xa7, 0xe3, 0x21, 0xdf, 0x22, 0x52,
	0x0f, 0x5f, 0x11, 0x98, 0x41, 0xc6, 0x16, 0x5b, 0xf1, 0x3d, 0x8b, 0x7e, 0x82, 0x56, 0x09, 0x2a,
	0xb6, 0x95, 0x9c, 0x63, 0x90, 0xe6, 0x86, 0x7f, 0x01, 0xf0, 0xb2, 0xcc, 0xcb, 0x74, 0x95, 0x33,
	0x2e, 0x17, 0xa8, 0xc4, 0x94, 0x4e, 0x90, 0x33, 0x8e, 0x7f, 0x43, 0xaf, 0x8e, 0x33, 0x5e, 0x55,
	0xf4, 0x86, 0x3b, 0xaa, 0x87, 0x7c, 0x93, 0x58, 0xd2, 0x9c, 0xd5, 0xde, 0x67, 0x5a, 0xed, 0xab,
	0xb4, 0xfa, 0x07, 0xed, 0xe8, 0x0c, 0xf4, 0x06, 0x04, 0x0f, 0xa0, 0x1b, 0xcc, 0xc2, 0x94, 0x44,
	0xcb, 0x88, 0x5c, 0x45, 0xb6, 0x82, 0x7b, 0x60, 0x9e, 0x8c, 0x8b, 0xc5, 0x34, 0x9e, 0xdb, 0x08,
	0xdb, 0x60, 0xd5, 0xf9, 0x34, 0x5e, 0x26, 0x11, 0xb1, 0x5b, 0xa3, 0x21, 0x18, 0xef, 0xdf, 0x60,
	0x13, 0xd4, 0x30, 0x49, 0x2f, 0x27, 0xb6, 0x82, 0xbb, 0xa0, 0x87, 0x49, 0x7a, 0xbe, 0x5c, 0xcc,
	0x6d, 0x34, 0x71, 0x9e, 0x0e, 0x2e, 0xda, 0x1f, 0x5c, 0xf4, 0x72, 0x70, 0xd1, 0xe3, 0xd1, 0x55,
	0xf6, 0x47, 0x57, 0x79, 0x3e, 0xba, 0xca, 0xb5, 0x26, 0x87, 0xfe, 0x7f, 0x0b, 0x00, 0x00, 0xff,
	0xff, 0x33, 0xb5, 0x09, 0x72, 0x17, 0x02, 0x00, 0x00,
}

func (m *CmdInput) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CmdInput) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CmdInput) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintAntalk(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x22
	}
	if m.DataType != 0 {
		i = encodeVarintAntalk(dAtA, i, uint64(m.DataType))
		i--
		dAtA[i] = 0x18
	}
	if m.ReqId != 0 {
		i = encodeVarintAntalk(dAtA, i, uint64(m.ReqId))
		i--
		dAtA[i] = 0x10
	}
	if m.CmdType != 0 {
		i = encodeVarintAntalk(dAtA, i, uint64(m.CmdType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CmdOutput) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CmdOutput) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CmdOutput) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintAntalk(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x3a
	}
	if m.DataType != 0 {
		i = encodeVarintAntalk(dAtA, i, uint64(m.DataType))
		i--
		dAtA[i] = 0x30
	}
	if len(m.ErrorMessage) > 0 {
		i -= len(m.ErrorMessage)
		copy(dAtA[i:], m.ErrorMessage)
		i = encodeVarintAntalk(dAtA, i, uint64(len(m.ErrorMessage)))
		i--
		dAtA[i] = 0x2a
	}
	if m.ErrorCode != 0 {
		i = encodeVarintAntalk(dAtA, i, uint64(m.ErrorCode))
		i--
		dAtA[i] = 0x20
	}
	if m.Status {
		i--
		if m.Status {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.ReqId != 0 {
		i = encodeVarintAntalk(dAtA, i, uint64(m.ReqId))
		i--
		dAtA[i] = 0x10
	}
	if m.CmdType != 0 {
		i = encodeVarintAntalk(dAtA, i, uint64(m.CmdType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintAntalk(dAtA []byte, offset int, v uint64) int {
	offset -= sovAntalk(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CmdInput) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CmdType != 0 {
		n += 1 + sovAntalk(uint64(m.CmdType))
	}
	if m.ReqId != 0 {
		n += 1 + sovAntalk(uint64(m.ReqId))
	}
	if m.DataType != 0 {
		n += 1 + sovAntalk(uint64(m.DataType))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovAntalk(uint64(l))
	}
	return n
}

func (m *CmdOutput) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CmdType != 0 {
		n += 1 + sovAntalk(uint64(m.CmdType))
	}
	if m.ReqId != 0 {
		n += 1 + sovAntalk(uint64(m.ReqId))
	}
	if m.Status {
		n += 2
	}
	if m.ErrorCode != 0 {
		n += 1 + sovAntalk(uint64(m.ErrorCode))
	}
	l = len(m.ErrorMessage)
	if l > 0 {
		n += 1 + l + sovAntalk(uint64(l))
	}
	if m.DataType != 0 {
		n += 1 + sovAntalk(uint64(m.DataType))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovAntalk(uint64(l))
	}
	return n
}

func sovAntalk(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAntalk(x uint64) (n int) {
	return sovAntalk(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CmdInput) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAntalk
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CmdInput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CmdInput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CmdType", wireType)
			}
			m.CmdType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAntalk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CmdType |= CmdType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReqId", wireType)
			}
			m.ReqId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAntalk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReqId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataType", wireType)
			}
			m.DataType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAntalk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DataType |= DataType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAntalk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAntalk
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAntalk
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAntalk(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAntalk
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAntalk
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CmdOutput) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAntalk
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CmdOutput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CmdOutput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CmdType", wireType)
			}
			m.CmdType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAntalk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CmdType |= CmdType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReqId", wireType)
			}
			m.ReqId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAntalk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReqId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAntalk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAntalk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAntalk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAntalk
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAntalk
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrorMessage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataType", wireType)
			}
			m.DataType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAntalk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DataType |= DataType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAntalk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAntalk
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAntalk
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAntalk(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAntalk
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAntalk
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAntalk(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAntalk
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAntalk
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAntalk
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAntalk
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAntalk
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAntalk
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAntalk        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAntalk          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAntalk = fmt.Errorf("proto: unexpected end of group")
)
