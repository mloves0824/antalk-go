// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cmd_service.proto

package proto

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type CmdType int32

const (
	CmdType_CMD_RESERVE  CmdType = 0
	CmdType_CMD_LOGIN    CmdType = 1
	CmdType_CMD_REGISTER CmdType = 2
	CmdType_CMD_MSG      CmdType = 3
)

var CmdType_name = map[int32]string{
	0: "CMD_RESERVE",
	1: "CMD_LOGIN",
	2: "CMD_REGISTER",
	3: "CMD_MSG",
}

var CmdType_value = map[string]int32{
	"CMD_RESERVE":  0,
	"CMD_LOGIN":    1,
	"CMD_REGISTER": 2,
	"CMD_MSG":      3,
}

func (x CmdType) String() string {
	return proto.EnumName(CmdType_name, int32(x))
}

func (CmdType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_22c956d5d557ed38, []int{0}
}

type DataType int32

const (
	DataType_DT_PB   DataType = 0
	DataType_DT_JSON DataType = 1
)

var DataType_name = map[int32]string{
	0: "DT_PB",
	1: "DT_JSON",
}

var DataType_value = map[string]int32{
	"DT_PB":   0,
	"DT_JSON": 1,
}

func (x DataType) String() string {
	return proto.EnumName(DataType_name, int32(x))
}

func (DataType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_22c956d5d557ed38, []int{1}
}

type ErrorCode int32

const (
	ErrorCode_ERROR_NONE     ErrorCode = 0
	ErrorCode_ERROR_PARAM    ErrorCode = -1
	ErrorCode_ERROR_PASSWORD ErrorCode = -2
	ErrorCode_ERROR_INTERNAL ErrorCode = -3
)

var ErrorCode_name = map[int32]string{
	0:  "ERROR_NONE",
	-1: "ERROR_PARAM",
	-2: "ERROR_PASSWORD",
	-3: "ERROR_INTERNAL",
}

var ErrorCode_value = map[string]int32{
	"ERROR_NONE":     0,
	"ERROR_PARAM":    -1,
	"ERROR_PASSWORD": -2,
	"ERROR_INTERNAL": -3,
}

func (x ErrorCode) String() string {
	return proto.EnumName(ErrorCode_name, int32(x))
}

func (ErrorCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_22c956d5d557ed38, []int{2}
}

type CmdMeta struct {
	CmdType      CmdType   `protobuf:"varint,1,opt,name=cmd_type,json=cmdType,proto3,enum=proto.CmdType" json:"cmd_type,omitempty"`
	ReqId        int64     `protobuf:"varint,2,opt,name=req_id,json=reqId,proto3" json:"req_id,omitempty"`
	Status       bool      `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`
	ErrorCode    ErrorCode `protobuf:"varint,4,opt,name=error_code,json=errorCode,proto3,enum=proto.ErrorCode" json:"error_code,omitempty"`
	ErrorMessage string    `protobuf:"bytes,5,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	DataType     DataType  `protobuf:"varint,6,opt,name=data_type,json=dataType,proto3,enum=proto.DataType" json:"data_type,omitempty"`
}

func (m *CmdMeta) Reset()         { *m = CmdMeta{} }
func (m *CmdMeta) String() string { return proto.CompactTextString(m) }
func (*CmdMeta) ProtoMessage()    {}
func (*CmdMeta) Descriptor() ([]byte, []int) {
	return fileDescriptor_22c956d5d557ed38, []int{0}
}
func (m *CmdMeta) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CmdMeta) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CmdMeta.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CmdMeta) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CmdMeta.Merge(m, src)
}
func (m *CmdMeta) XXX_Size() int {
	return m.Size()
}
func (m *CmdMeta) XXX_DiscardUnknown() {
	xxx_messageInfo_CmdMeta.DiscardUnknown(m)
}

var xxx_messageInfo_CmdMeta proto.InternalMessageInfo

func (m *CmdMeta) GetCmdType() CmdType {
	if m != nil {
		return m.CmdType
	}
	return CmdType_CMD_RESERVE
}

func (m *CmdMeta) GetReqId() int64 {
	if m != nil {
		return m.ReqId
	}
	return 0
}

func (m *CmdMeta) GetStatus() bool {
	if m != nil {
		return m.Status
	}
	return false
}

func (m *CmdMeta) GetErrorCode() ErrorCode {
	if m != nil {
		return m.ErrorCode
	}
	return ErrorCode_ERROR_NONE
}

func (m *CmdMeta) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

func (m *CmdMeta) GetDataType() DataType {
	if m != nil {
		return m.DataType
	}
	return DataType_DT_PB
}

type CmdReq struct {
	Meta *CmdMeta `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
	Data []byte   `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *CmdReq) Reset()         { *m = CmdReq{} }
func (m *CmdReq) String() string { return proto.CompactTextString(m) }
func (*CmdReq) ProtoMessage()    {}
func (*CmdReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_22c956d5d557ed38, []int{1}
}
func (m *CmdReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CmdReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CmdReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CmdReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CmdReq.Merge(m, src)
}
func (m *CmdReq) XXX_Size() int {
	return m.Size()
}
func (m *CmdReq) XXX_DiscardUnknown() {
	xxx_messageInfo_CmdReq.DiscardUnknown(m)
}

var xxx_messageInfo_CmdReq proto.InternalMessageInfo

func (m *CmdReq) GetMeta() *CmdMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *CmdReq) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type CmdResp struct {
	Meta *CmdMeta `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
	Data []byte   `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *CmdResp) Reset()         { *m = CmdResp{} }
func (m *CmdResp) String() string { return proto.CompactTextString(m) }
func (*CmdResp) ProtoMessage()    {}
func (*CmdResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_22c956d5d557ed38, []int{2}
}
func (m *CmdResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CmdResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CmdResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CmdResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CmdResp.Merge(m, src)
}
func (m *CmdResp) XXX_Size() int {
	return m.Size()
}
func (m *CmdResp) XXX_DiscardUnknown() {
	xxx_messageInfo_CmdResp.DiscardUnknown(m)
}

var xxx_messageInfo_CmdResp proto.InternalMessageInfo

func (m *CmdResp) GetMeta() *CmdMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *CmdResp) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type CmdNotify struct {
	Meta *CmdMeta `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
	Data []byte   `protobuf:"bytes,7,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *CmdNotify) Reset()         { *m = CmdNotify{} }
func (m *CmdNotify) String() string { return proto.CompactTextString(m) }
func (*CmdNotify) ProtoMessage()    {}
func (*CmdNotify) Descriptor() ([]byte, []int) {
	return fileDescriptor_22c956d5d557ed38, []int{3}
}
func (m *CmdNotify) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CmdNotify) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CmdNotify.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CmdNotify) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CmdNotify.Merge(m, src)
}
func (m *CmdNotify) XXX_Size() int {
	return m.Size()
}
func (m *CmdNotify) XXX_DiscardUnknown() {
	xxx_messageInfo_CmdNotify.DiscardUnknown(m)
}

var xxx_messageInfo_CmdNotify proto.InternalMessageInfo

func (m *CmdNotify) GetMeta() *CmdMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *CmdNotify) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterEnum("proto.CmdType", CmdType_name, CmdType_value)
	proto.RegisterEnum("proto.DataType", DataType_name, DataType_value)
	proto.RegisterEnum("proto.ErrorCode", ErrorCode_name, ErrorCode_value)
	proto.RegisterType((*CmdMeta)(nil), "proto.CmdMeta")
	proto.RegisterType((*CmdReq)(nil), "proto.CmdReq")
	proto.RegisterType((*CmdResp)(nil), "proto.CmdResp")
	proto.RegisterType((*CmdNotify)(nil), "proto.CmdNotify")
}

func init() { proto.RegisterFile("cmd_service.proto", fileDescriptor_22c956d5d557ed38) }

var fileDescriptor_22c956d5d557ed38 = []byte{
	// 445 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x51, 0x3d, 0x8f, 0xd3, 0x40,
	0x10, 0xf5, 0x5e, 0x12, 0x27, 0x9e, 0xe4, 0x72, 0xcb, 0x4a, 0x20, 0x4b, 0x48, 0x56, 0x64, 0x9a,
	0x10, 0xa1, 0x43, 0x82, 0x3f, 0x40, 0xce, 0xb6, 0x42, 0xd0, 0xd9, 0x3e, 0x8d, 0x2d, 0x28, 0x2d,
	0x93, 0x1d, 0x50, 0x0a, 0xcb, 0x89, 0xbd, 0x20, 0xe5, 0x5f, 0xf0, 0xb3, 0x28, 0xaf, 0xa4, 0x44,
	0x49, 0xc1, 0xaf, 0xe0, 0x43, 0x5e, 0x27, 0x07, 0x05, 0x0d, 0xb8, 0xf1, 0xdb, 0xf7, 0x66, 0xdf,
	0xce, 0xbc, 0x81, 0x7b, 0xab, 0x42, 0x66, 0x35, 0x55, 0x1f, 0xd7, 0x2b, 0xba, 0xdc, 0x54, 0xa5,
	0x2a, 0x45, 0x4f, 0xff, 0xdc, 0x6f, 0x0c, 0xfa, 0x5e, 0x21, 0x43, 0x52, 0xb9, 0x78, 0x0c, 0x83,
	0xa6, 0x4e, 0xed, 0x36, 0x64, 0xb3, 0x09, 0x9b, 0x8e, 0x9f, 0x8d, 0xdb, 0xe2, 0x4b, 0xaf, 0x90,
	0xe9, 0x6e, 0x43, 0xd8, 0x5f, 0xb5, 0x40, 0xdc, 0x07, 0xb3, 0xa2, 0x6d, 0xb6, 0x96, 0xf6, 0xd9,
	0x84, 0x4d, 0x3b, 0xd8, 0xab, 0x68, 0xbb, 0x94, 0xe2, 0x01, 0x98, 0xb5, 0xca, 0xd5, 0x87, 0xda,
	0xee, 0x4c, 0xd8, 0x74, 0x80, 0xc7, 0x93, 0x78, 0x0a, 0x40, 0x55, 0x55, 0x56, 0xd9, 0xaa, 0x94,
	0x64, 0x77, 0xb5, 0x37, 0x3f, 0x7a, 0x07, 0x8d, 0xe0, 0x95, 0x92, 0xd0, 0xa2, 0x13, 0x14, 0x8f,
	0xe0, 0xbc, 0xbd, 0x50, 0x50, 0x5d, 0xe7, 0xef, 0xc9, 0xee, 0x4d, 0xd8, 0xd4, 0xc2, 0x91, 0x26,
	0xc3, 0x96, 0x13, 0x4f, 0xc0, 0x92, 0xb9, 0xca, 0xdb, 0x86, 0x4d, 0x6d, 0x7a, 0x71, 0x34, 0xf5,
	0x73, 0x95, 0xeb, 0x8e, 0x07, 0xf2, 0x88, 0xdc, 0x17, 0x60, 0x7a, 0x85, 0x44, 0xda, 0x0a, 0x17,
	0xba, 0x05, 0xa9, 0x5c, 0xcf, 0x38, 0xfc, 0x73, 0xc6, 0x26, 0x05, 0xd4, 0x9a, 0x10, 0xd0, 0x6d,
	0x6e, 0xea, 0xf1, 0x46, 0xa8, 0xb1, 0x3b, 0xd7, 0x51, 0x21, 0xd5, 0x9b, 0xff, 0xb6, 0xf0, 0xc0,
	0xf2, 0x0a, 0x19, 0x95, 0x6a, 0xfd, 0x6e, 0xf7, 0x4f, 0x26, 0xfd, 0xdf, 0x26, 0xb3, 0x97, 0xba,
	0x0f, 0xbd, 0x87, 0x0b, 0x18, 0x7a, 0xa1, 0x9f, 0x61, 0x90, 0x04, 0xf8, 0x3a, 0xe0, 0x86, 0x38,
	0x07, 0xab, 0x21, 0xae, 0xe3, 0xc5, 0x32, 0xe2, 0x4c, 0x70, 0x18, 0xb5, 0xfa, 0x62, 0x99, 0xa4,
	0x01, 0xf2, 0x33, 0x31, 0x84, 0x7e, 0xc3, 0x84, 0xc9, 0x82, 0x77, 0x66, 0x2e, 0x0c, 0x4e, 0x49,
	0x09, 0x0b, 0x7a, 0x7e, 0x9a, 0xdd, 0x5c, 0x71, 0xa3, 0xa9, 0xf1, 0xd3, 0xec, 0x55, 0x12, 0x47,
	0x9c, 0xcd, 0x4a, 0xb0, 0xee, 0x56, 0x24, 0xc6, 0x00, 0x01, 0x62, 0x8c, 0x59, 0x14, 0x47, 0xcd,
	0x73, 0x36, 0x0c, 0xdb, 0xf3, 0xcd, 0x1c, 0xe7, 0x21, 0xff, 0x79, 0xfa, 0x98, 0x78, 0x08, 0xe3,
	0x93, 0x92, 0x24, 0x6f, 0x62, 0xf4, 0xf9, 0x8f, 0xbf, 0x88, 0xcb, 0x28, 0x0d, 0x30, 0x9a, 0x5f,
	0xf3, 0xef, 0x77, 0xe2, 0x95, 0xfd, 0x79, 0xef, 0xb0, 0xdb, 0xbd, 0xc3, 0xbe, 0xee, 0x1d, 0xf6,
	0xe9, 0xe0, 0x18, 0xb7, 0x07, 0xc7, 0xf8, 0x72, 0x70, 0x8c, 0xb7, 0xa6, 0x4e, 0xe8, 0xf9, 0xaf,
	0x00, 0x00, 0x00, 0xff, 0xff, 0xe0, 0x96, 0x53, 0x5b, 0xcf, 0x02, 0x00, 0x00,
}

func (m *CmdMeta) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CmdMeta) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CmdMeta) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DataType != 0 {
		i = encodeVarintCmdService(dAtA, i, uint64(m.DataType))
		i--
		dAtA[i] = 0x30
	}
	if len(m.ErrorMessage) > 0 {
		i -= len(m.ErrorMessage)
		copy(dAtA[i:], m.ErrorMessage)
		i = encodeVarintCmdService(dAtA, i, uint64(len(m.ErrorMessage)))
		i--
		dAtA[i] = 0x2a
	}
	if m.ErrorCode != 0 {
		i = encodeVarintCmdService(dAtA, i, uint64(m.ErrorCode))
		i--
		dAtA[i] = 0x20
	}
	if m.Status {
		i--
		if m.Status {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.ReqId != 0 {
		i = encodeVarintCmdService(dAtA, i, uint64(m.ReqId))
		i--
		dAtA[i] = 0x10
	}
	if m.CmdType != 0 {
		i = encodeVarintCmdService(dAtA, i, uint64(m.CmdType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CmdReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CmdReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CmdReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintCmdService(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x12
	}
	if m.Meta != nil {
		{
			size, err := m.Meta.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCmdService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CmdResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CmdResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CmdResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintCmdService(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x12
	}
	if m.Meta != nil {
		{
			size, err := m.Meta.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCmdService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CmdNotify) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CmdNotify) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CmdNotify) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintCmdService(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x3a
	}
	if m.Meta != nil {
		{
			size, err := m.Meta.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCmdService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintCmdService(dAtA []byte, offset int, v uint64) int {
	offset -= sovCmdService(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CmdMeta) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CmdType != 0 {
		n += 1 + sovCmdService(uint64(m.CmdType))
	}
	if m.ReqId != 0 {
		n += 1 + sovCmdService(uint64(m.ReqId))
	}
	if m.Status {
		n += 2
	}
	if m.ErrorCode != 0 {
		n += 1 + sovCmdService(uint64(m.ErrorCode))
	}
	l = len(m.ErrorMessage)
	if l > 0 {
		n += 1 + l + sovCmdService(uint64(l))
	}
	if m.DataType != 0 {
		n += 1 + sovCmdService(uint64(m.DataType))
	}
	return n
}

func (m *CmdReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Meta != nil {
		l = m.Meta.Size()
		n += 1 + l + sovCmdService(uint64(l))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovCmdService(uint64(l))
	}
	return n
}

func (m *CmdResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Meta != nil {
		l = m.Meta.Size()
		n += 1 + l + sovCmdService(uint64(l))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovCmdService(uint64(l))
	}
	return n
}

func (m *CmdNotify) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Meta != nil {
		l = m.Meta.Size()
		n += 1 + l + sovCmdService(uint64(l))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovCmdService(uint64(l))
	}
	return n
}

func sovCmdService(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCmdService(x uint64) (n int) {
	return sovCmdService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CmdMeta) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCmdService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CmdMeta: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CmdMeta: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CmdType", wireType)
			}
			m.CmdType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmdService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CmdType |= CmdType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReqId", wireType)
			}
			m.ReqId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmdService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReqId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmdService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmdService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= ErrorCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmdService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCmdService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCmdService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrorMessage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataType", wireType)
			}
			m.DataType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmdService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DataType |= DataType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCmdService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCmdService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCmdService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CmdReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCmdService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CmdReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CmdReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmdService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCmdService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCmdService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Meta == nil {
				m.Meta = &CmdMeta{}
			}
			if err := m.Meta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmdService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCmdService
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCmdService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCmdService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCmdService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCmdService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CmdResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCmdService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CmdResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CmdResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmdService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCmdService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCmdService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Meta == nil {
				m.Meta = &CmdMeta{}
			}
			if err := m.Meta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmdService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCmdService
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCmdService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCmdService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCmdService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCmdService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CmdNotify) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCmdService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CmdNotify: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CmdNotify: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmdService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCmdService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCmdService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Meta == nil {
				m.Meta = &CmdMeta{}
			}
			if err := m.Meta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmdService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCmdService
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCmdService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCmdService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCmdService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCmdService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCmdService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCmdService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCmdService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCmdService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCmdService
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCmdService
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCmdService
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCmdService        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCmdService          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCmdService = fmt.Errorf("proto: unexpected end of group")
)
